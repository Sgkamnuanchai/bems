#!/usr/bin/env python3
# -*- coding:utf-8 -*-
#
# This application is an example on how to use aiozeroconf
#
# Copyright (c) 2018 Fran√ßois Wautier
#


import argparse
import asyncio
import socket
import json

from aiozeroconf import ServiceBrowser, ServiceStateChange, Zeroconf



def on_service_state_change(zc, service_type, name, state_change):
    global opts
    if opts.pattern and opts.pattern.lower() not in name.lower():
        return
    if state_change is ServiceStateChange.Added:
        asyncio.ensure_future(on_service_state_change_process(zc, service_type, name))

async def on_service_state_change_process(zc, service_type, name):
    global result
    global opts
    info = await zc.get_service_info(service_type, name)
    #print("Service %s of type %s state changed: %s, %s" % (name, service_type, ServiceStateChange.Added, info))
    if info:
        if info.address:
            result[socket.inet_ntoa(info.address)] = {"port":info.port}
            if info.address6:
                result[socket.inet_ntoa(info.address)]["ipv6"] = socket.inet_ntop(socket.AF_INET6, info.address6)
                result[socket.inet_ntoa(info.address)]["ipv6 port"] = info.port

def guess(service):
    """
    Attempt guessing and completing service name.
    Most services are on _tcp, and even more on local domain!
    """
    if '.' not in service:
        return service + '._tcp.local.'
    elif service.endswith(('._tcp', '._udp')):
        return service + '.local.'
    return service


async def do_close(zc):
    await zc.close()
    await asyncio.sleep(4)

async def sleepy():
    await asyncio.sleep(4)

def main():
    global result
    global opts
    result={}
    parser = argparse.ArgumentParser(description="Zeroconf service discovery tool")
    parser.add_argument('-i', "--iface", default="",
                        help="Name of the inteface to use.")
    parser.add_argument("-s", "--service", default="_http._tcp.local.",
                        help="The service to browse.")
    parser.add_argument("-p", "--pattern", default="",
                        help="Select only those services containing the pattern")
    parser.add_argument("-d", "--debug", action='store_true', default=False,
                        help="Set debug mode.")
    try:
        opts = parser.parse_args()
    except Exception as e:
        parser.error("Error: " + str(e))

    proto = [socket.AF_INET]
    loop = asyncio.get_event_loop()
    zc = Zeroconf(loop, proto, iface=opts.iface)

    try:
        ServiceBrowser(zc, guess(opts.service), handlers=[on_service_state_change])
        loop.run_until_complete(sleepy())
        print(json.dumps(result))
        loop.run_until_complete(do_close(zc))
        loop.close()
    except:
        pass


if __name__ == '__main__':
    main()
